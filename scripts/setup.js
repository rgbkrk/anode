#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, "..");

// Check if running as postinstall hook
const isPostInstall = process.env.npm_lifecycle_event === "postinstall";

function createEnvFile() {
  const envPath = join(projectRoot, ".env");
  const envExamplePath = join(projectRoot, ".env.example");

  if (existsSync(envPath)) {
    if (!isPostInstall) {
      console.log("‚úÖ .env file already exists");
    }
    return;
  }

  if (!existsSync(envExamplePath)) {
    console.error("‚ùå .env.example file not found");
    process.exit(1);
  }

  // Read the example file and create a clean .env with essentials
  const envContent = `# Anode Environment Configuration
# Auto-generated by setup script

# LiveStore Sync Backend URL
VITE_LIVESTORE_SYNC_URL=ws://localhost:8787

# Authentication token for sync backend
AUTH_TOKEN=insecure-token-change-me

# OpenAI API Key for AI cells (uncomment and add your key)
# Get your key from: https://platform.openai.com/api-keys
# OPENAI_API_KEY=your-openai-api-key-here
`;

  writeFileSync(envPath, envContent);
  console.log("‚úÖ Created .env file with default configuration");
}

function validateEnvironment() {
  const envPath = join(projectRoot, ".env");

  if (!existsSync(envPath)) {
    console.error("‚ùå .env file not found");
    return false;
  }

  const envContent = readFileSync(envPath, "utf8");
  const requiredVars = ["VITE_LIVESTORE_SYNC_URL", "AUTH_TOKEN"];

  for (const varName of requiredVars) {
    if (!envContent.includes(`${varName}=`)) {
      console.error(`‚ùå Missing required environment variable: ${varName}`);
      return false;
    }
  }

  if (!isPostInstall) {
    console.log("‚úÖ Environment configuration is valid");
  }
  return true;
}

function checkPorts() {
  console.log("\nüîç Port Configuration:");
  console.log("  - Web Client: http://localhost:5173");
  console.log("  - Sync Backend: ws://localhost:8787");
  console.log("  - Make sure these ports are available");
}

function showNextSteps() {
  console.log("\nüöÄ Next Steps:");
  console.log("  1. Start development: pnpm dev");
  console.log("  2. Open http://localhost:5173");
  console.log("  3. Create a notebook and get kernel command from UI");
  console.log(
    "  4. Start kernel: NOTEBOOK_ID=your-notebook-id pnpm dev:kernel",
  );
  console.log("\nüí° Optional: Add your OpenAI API key to .env for AI features");
}

function main() {
  if (!isPostInstall) {
    console.log("üîß Setting up Anode development environment...\n");
  }

  createEnvFile();

  if (validateEnvironment()) {
    if (!isPostInstall) {
      checkPorts();
      showNextSteps();
      console.log("\n‚úÖ Setup complete! Ready to develop.");
    }
  } else {
    console.log("\n‚ùå Setup failed. Please check the errors above.");
    process.exit(1);
  }
}

main();
