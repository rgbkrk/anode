#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, "..");

// Check if running as postinstall hook
const isPostInstall = process.env.npm_lifecycle_event === "postinstall";

function createEnvFiles() {
  const webClientEnvPath = join(projectRoot, "packages", "web-client", ".env");
  const kernelEnvPath = join(
    projectRoot,
    "packages",
    "dev-server-kernel-ls-client",
    ".env",
  );

  let created = [];

  // Create web client .env (only VITE_ vars, exposed to browser)
  if (!existsSync(webClientEnvPath)) {
    const webClientEnvContent = `# Anode Web Client Environment
# Auto-generated by setup script
# NOTE: All VITE_ variables are exposed to the browser

# LiveStore Sync Backend URL
VITE_LIVESTORE_SYNC_URL=ws://localhost:8787
`;
    writeFileSync(webClientEnvPath, webClientEnvContent);
    created.push("web client");
  }

  // Create kernel server .env (server-only vars, including API keys)
  if (!existsSync(kernelEnvPath)) {
    const kernelEnvContent = `# Anode Kernel Server Environment
# Auto-generated by setup script
# NOTE: These variables are server-only and not exposed to the browser

# LiveStore Sync Backend URL (for kernel server connection)
LIVESTORE_SYNC_URL=ws://localhost:8787

# OpenAI API Key for AI cells (uncomment and add your key)
# Get your key from: https://platform.openai.com/api-keys
# OPENAI_API_KEY=your-openai-api-key-here

# Authentication token for sync backend
AUTH_TOKEN=insecure-token-change-me
`;
    writeFileSync(kernelEnvPath, kernelEnvContent);
    created.push("kernel server");
  }

  if (created.length > 0) {
    console.log(`‚úÖ Created .env file(s) for: ${created.join(", ")}`);
  } else if (!isPostInstall) {
    console.log("‚úÖ .env files already exist");
  }
}

function validateEnvironment() {
  const webClientEnvPath = join(projectRoot, "packages", "web-client", ".env");
  const kernelEnvPath = join(
    projectRoot,
    "packages",
    "dev-server-kernel-ls-client",
    ".env",
  );

  // Check web-client .env
  if (!existsSync(webClientEnvPath)) {
    console.error("‚ùå web-client .env file not found");
    return false;
  }

  // Check kernel server .env
  if (!existsSync(kernelEnvPath)) {
    console.error("‚ùå kernel server .env file not found");
    return false;
  }

  const webClientEnvContent = readFileSync(webClientEnvPath, "utf8");
  const kernelEnvContent = readFileSync(kernelEnvPath, "utf8");

  // Validate web-client .env has VITE_LIVESTORE_SYNC_URL
  if (!webClientEnvContent.includes("VITE_LIVESTORE_SYNC_URL=")) {
    console.error("‚ùå Missing VITE_LIVESTORE_SYNC_URL in web-client .env");
    return false;
  }

  // Validate kernel server .env has LIVESTORE_SYNC_URL
  if (!kernelEnvContent.includes("LIVESTORE_SYNC_URL=")) {
    console.error("‚ùå Missing LIVESTORE_SYNC_URL in kernel server .env");
    return false;
  }

  if (!isPostInstall) {
    console.log("‚úÖ Environment configuration is valid");
  }
  return true;
}

function checkPorts() {
  console.log("\nüîç Port Configuration:");
  console.log("  - Web Client: http://localhost:5173");
  console.log("  - Sync Backend: ws://localhost:8787");
  console.log("  - Make sure these ports are available");
}

function showNextSteps() {
  console.log("\nüöÄ Next Steps:");
  console.log("  1. Start development: pnpm dev");
  console.log("  2. Open http://localhost:5173");
  console.log("  3. Create a notebook and get kernel command from UI");
  console.log(
    "  4. Start runtime: NOTEBOOK_ID=your-notebook-id pnpm dev:runtime",
  );
  console.log(
    "\nüí° Optional: Add your OpenAI API key to packages/pyodide-runtime-agent/.env",
  );
  console.log("    (API keys are kept server-side for security)");
}

function main() {
  if (!isPostInstall) {
    console.log("üîß Setting up Anode development environment...\n");
  }

  createEnvFiles();

  if (validateEnvironment()) {
    if (!isPostInstall) {
      checkPorts();
      showNextSteps();
      console.log("\n‚úÖ Setup complete! Ready to develop.");
    }
  } else {
    console.log("\n‚ùå Setup failed. Please check the errors above.");
    process.exit(1);
  }
}

main();
